
//Во всех заданиях необходимо реализовать конструктор инициализации (один или несколько),
//и конструктор без аргументов.

#include <iostream>
#include <windows.h>
#include <string>
using namespace std;
int iWidth = GetSystemMetrics(SM_CXSCREEN);  // разрешение экрана по горизонтали
int iHeight = GetSystemMetrics(SM_CYSCREEN); // разрешение экрана по вертикали
class ModelWindow {
    string title, color;
    int x, y, width, height;
    bool visible, frame;
public:
    ModelWindow(); //конструктор без аргументов
    ModelWindow(string title, int x, int y, int width, int height, string color, bool visible, bool frame); //конструктор инициализации и проверки
    ModelWindow(const ModelWindow& x);//конструктор копирования

  
    void Move(int delx, int dely);
    void Resize(int w, int h);
    void ChangeColor(string color);
    void ChangeVis();
    void ChangeFr();
    friend istream& operator>>(istream& stream, ModelWindow& a); //перегрузка ввода с клавиатуры
    friend ostream& operator<<(ostream& stream, const ModelWindow& a);//перегрузка вывода на экран

    friend ModelWindow operator+(ModelWindow& a, ModelWindow& b);
    friend ModelWindow operator-(ModelWindow& a, ModelWindow& b);
    friend ModelWindow operator*(ModelWindow& a, ModelWindow& b);
    friend bool operator==(ModelWindow& a, ModelWindow& b);
    friend bool operator>(ModelWindow& a, ModelWindow& b);
    friend bool operator<(ModelWindow& a, ModelWindow& b);
};
ModelWindow::ModelWindow() {
    title = "";
    x = y = 0;
    width = 1000;
    height = 500;
    color = "WHITE";
    visible =frame= 0;
};
ModelWindow::ModelWindow(string title, int x, int y, int width, int height, string color, bool visable, bool frame) {
    this->title = title;
    if (x < 0 or x > iWidth) {
        std::cout << "X exceeds screen's size! Default values were setted!" << endl;
        this->x = 0;
    }
    else {
        this->x = x;
    }

    if (y < 0 or y > iHeight) {
        cout << "Y exceeds screen's size! Default values were setted!" << endl;
        this->y = 0;
    }
    else {
        this->y = y;
    }

    if (width > iWidth or height > iHeight or width == 0 or height == 0) {
        cout << "Width or height exceeds screen's size! Default values were setted!\n" << endl;
        this->width = 1000;
        this->height = 500;
    }
    else {
        this->width = width;
        this->height = height;
    }
    this->color = color;
    this->visible = visible;
    this->frame = frame;
}
ModelWindow::ModelWindow(const ModelWindow& a) {
    this->title = a.title;
    this->x = a.x;
    this->y = a.y;
    this->width = a.width;
    this->height = a.height;
    this->color = a.color;
    this->visible = a.visible;
    this->frame = a.frame;
}
istream& operator>>(istream& stream, ModelWindow& a){
   string title, color;
    int x, y, width, height;
    bool visible, frame;
    
    cout << endl << "Title of window: ";
    stream >> title;
    a.title = title;
    cout << "Enter x, y of the upper-left corner: ";
    stream >> x >> y;
     if (x < 0 or x > iWidth) {
        cout << "X exceeds screen's size! Default values were setted!" << endl;
    }
    else {
        a.x = x;
    }
     if (y < 0 or y > iHeight) {
        cout << "Y exceeds screen's size! Default values were setted!" << endl;
    }
    else {
        a.y = y;
    }

cout << "Enter width and height if frame: ";
    stream >> width >> height;

    if (width > iWidth or height > iHeight or width <= 0 or height <= 0) {
        cout << "Width or height exceeds screen's size! Default values were setted!\n" << endl;
    }
    else {
        a.width = width;
        a.height = height;
    }
    cout << "Enter color: ";
    stream >> color;
    cout << "Framed?  (true / false): ";
    stream >> frame;
    cout << "Visible? (true / false): ";
    stream >> visible;
   
    a.color = color;
    a.visible = visible;
    a.frame = frame;
    return stream;
}

 ostream& operator<<(ostream& stream, const ModelWindow& a) {
     return (stream << endl << "Title: " << a.title << endl << "Coordinates: " << a.x << " " <<
     a.y << endl << "Size: " << a.width << "x" << a.height << endl << "Color: " << a.color << endl << "Visible: " << a.visible << endl << "Framed: " << a.frame << endl);
}
 ModelWindow operator+(ModelWindow& a, ModelWindow& b) {
     ModelWindow x(a);
     x.width = a.width + b.width;
     x.height = a.height + b.height;
     return x;
 }
 
 ModelWindow operator-(ModelWindow& a, ModelWindow& b) {
     ModelWindow x(a);
     x.width = a.width - b.width;
     x.height = a.height - b.height;
     return x;
 }
 ModelWindow operator*(ModelWindow& a, ModelWindow& b) {
     ModelWindow x(a);
     x.width = a.width * b.width;
     x.height = a.height * b.height;
     x.visible = a.visible * b.visible;
     return x;
 }
  bool operator==(ModelWindow& a, ModelWindow& b) {
      return (a.width == b.width && a.height == b.height && a.color == b.color && a.title == b.title);
  }
  bool operator>(ModelWindow& a, ModelWindow& b) {
      return (a.width * a.height > b.width * b.height);
  }
  bool operator<(ModelWindow& a, ModelWindow& b) {
      return (a.width * a.height < b.width * b.height);
  }
void ModelWindow::Move(int delx, int dely) {

    this->x += delx;
    this->y += dely;

    if (this->x + delx < 0) {
        this->x = 0;
    }
    if (this->y + dely < 0) {
        this->y = 0;
    }
    if (this->x + delx + this->width > iWidth) {
        this->x = iWidth - this->width;
    }
    if (this->y + dely + this->height > iHeight) {
        this->y = iHeight - this->height;
    }
}
void ModelWindow::Resize(int w, int h) {
    this->width = w;
    this->height = h;
    if (this->width > iWidth) {
        this->width = iWidth;
    }
    if (this->height > iHeight) {
        this->height = iHeight;
    }
}
void ModelWindow::ChangeColor(string color) {
    this->color = color;
}
void ModelWindow::ChangeVis() {
    this->visible = !this->visible;
}
void ModelWindow::ChangeFr() {
    this->frame = !this->frame;
}

int main()
{
    ModelWindow zero("zero", 0, 40, 300, 100, "red", 1, 0), windows[2];
    for (int i = 0; i < 2; i++) {
        cin >> windows[i];
    }
    zero = zero - zero;
    ModelWindow third = windows[0]+windows[1],fourth = third * zero, fifth (fourth);
    cout << zero << windows[0] << windows[1] << third << fourth << fifth;
    cout << "Test equal 1 - " << (zero == third) <<endl<< "Test equal 2 - " << (fifth == fourth)<<endl << "Test (>) - " << (windows[0]>windows[1]) << endl<< "Test (<) - " << (windows[0]<windows[1]);

    return 0;
}
